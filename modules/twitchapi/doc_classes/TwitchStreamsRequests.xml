<?xml version="1.0" encoding="UTF-8" ?>
<class name="TwitchStreamsRequests" inherits="TwitchRequestBase" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Twitch Streams API for stream information, keys, and markers.
	</brief_description>
	<description>
		TwitchStreamsRequests provides methods for accessing live stream information, retrieving stream keys, and managing stream markers. Requires various OAuth scopes depending on the operation. Access through [method TwitchAPI.get_streams].
	</description>
	<tutorials>
		<link title="Twitch API documentation">https://dev.twitch.tv/docs/api/reference</link>
	</tutorials>
	<methods>
		<method name="create_stream_marker">
			<return type="void" />
			<param index="0" name="user_id" type="String" />
			<param index="1" name="description" type="String" default="&quot;&quot;" />
			<description>
				Creates a marker at the current timestamp during a live stream. Optional [param description] adds a label to the marker (max 140 characters). Requires channel:manage:broadcast scope. Results are returned via the [signal TwitchAPI.request_completed] signal with signal_name "stream_marker_created".
				[b]Response includes:[/b] id (marker ID), created_at, position_seconds (position in stream), description.
				[codeblock]
				TwitchAPI.get_streams().create_stream_marker("user_id", "Epic moment!")
				# Response: {"data": [{"id": "marker123", "created_at": "2025-10-16T12:00:00Z", "position_seconds": 3600, "description": "Epic moment!"}]}
				[/codeblock]
			</description>
		</method>
		<method name="get_followed_streams">
			<return type="void" />
			<param index="0" name="user_id" type="String" />
			<param index="1" name="params" type="Dictionary" default="{}" />
			<description>
				Gets information about active streams for channels the user follows. Optional [param params] can include first. Requires user:read:follows scope. Results are returned via the [signal TwitchAPI.request_completed] signal with signal_name "followed_streams_received".
				[b]Response includes:[/b] Array of streams (same structure as get_streams response).
				[codeblock]
				TwitchAPI.get_streams().get_followed_streams("user_id", {"first": 20})
				# Response: {"data": [{"id": "stream123", "user_name": "Streamer1", "game_name": "Minecraft", "viewer_count": 2500, "started_at": "2025-10-16T10:00:00Z"}]}
				[/codeblock]
			</description>
		</method>
		<method name="get_stream_key">
			<return type="void" />
			<param index="0" name="broadcaster_id" type="String" />
			<description>
				Gets the broadcaster's stream key (sensitive information). Requires channel:read:stream_key scope. Results are returned via the [signal TwitchAPI.request_completed] signal with signal_name "stream_key_received".
				[b]Response includes:[/b] stream_key (sensitive - broadcaster's streaming key).
				[codeblock]
				TwitchAPI.get_streams().get_stream_key("broadcaster_id")
				# Response: {"data": [{"stream_key": "live_123456789_abcdefghijk"}]}
				[/codeblock]
			</description>
		</method>
		<method name="get_stream_markers">
			<return type="void" />
			<param index="0" name="params" type="Dictionary" />
			<description>
				Gets stream markers for a broadcaster's stream or VOD. [param params] must include user_id or video_id, and can include first. Requires user:read:broadcast scope. Results are returned via the [signal TwitchAPI.request_completed] signal with signal_name "stream_markers_received".
				[b]Response includes:[/b] Array with user_id/name/login, videos array containing video_id and markers array (id, created_at, description, position_seconds).
				[codeblock]
				var params = {"user_id": "broadcaster_id"}
				TwitchAPI.get_streams().get_stream_markers(params)
				# Response: {"data": [{"user_id": "123", "user_name": "Streamer", "videos": [{"video_id": "456", "markers": [{"id": "marker123", "created_at": "2025-10-16T12:00:00Z", "position_seconds": 3600, "description": "Epic"}]}]}]}
				[/codeblock]
			</description>
		</method>
		<method name="get_streams">
			<return type="void" />
			<param index="0" name="params" type="Dictionary" default="{}" />
			<description>
				Gets information about active streams. Optional [param params] can include user_id, user_login, game_id, type, language, and first. Results are returned via the [signal TwitchAPI.request_completed] signal with signal_name "streams_received".
				[b]Response includes:[/b] Array of streams with id, user_id/login/name, game_id, game_name, type, title, tags, viewer_count, started_at, language, thumbnail_url, is_mature.
				[codeblock]
				var params = {"game_id": "509658", "first": 20}
				TwitchAPI.get_streams().get_streams(params)
				# Response: {"data": [{"id": "stream123", "user_id": "456", "user_name": "Streamer1", "game_name": "Just Chatting", "title": "Chatting!", "viewer_count": 1500, "started_at": "2025-10-16T10:00:00Z"}]}
				[/codeblock]
			</description>
		</method>
	</methods>
</class>
